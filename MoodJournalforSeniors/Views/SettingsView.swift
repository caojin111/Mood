import SwiftUI

// MARK: - ËÆæÁΩÆÈ°µÈù¢ËßÜÂõæ
struct SettingsView: View {
    @EnvironmentObject var dataManager: DataManager
    @State private var showingUserProfile = false
    @State private var showingNotificationSettings = false
    @State private var showingDataExport = false
    @State private var showingAbout = false
    @State private var showingPrivacySettings = false
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: AppTheme.Spacing.lg) {
                    // Áî®Êà∑‰ø°ÊÅØÂç°Áâá
                    userProfileSection
                    
                    // Â∫îÁî®ËÆæÁΩÆ
                    appSettingsSection
                    
                    // Êï∞ÊçÆÁÆ°ÁêÜ
                    dataManagementSection
                    
                    // ÊîØÊåÅ‰∏éÂèçÈ¶à
                    supportSection
                    
                    // ÂÖ≥‰∫éÂ∫îÁî®
                    aboutSection
                }
                .padding(.horizontal, AppTheme.Spacing.md)
                .padding(.vertical, AppTheme.Spacing.sm)
            }
            .background(AppTheme.Colors.background)
            .navigationTitle("Êõ¥Â§ö")
            .navigationBarTitleDisplayMode(.large)
        }
        .sheet(isPresented: $showingUserProfile) {
            UserProfileView()
                .environmentObject(dataManager)
        }
        .sheet(isPresented: $showingNotificationSettings) {
            NotificationSettingsView()
                .environmentObject(dataManager)
        }
        .sheet(isPresented: $showingDataExport) {
            DataExportView()
                .environmentObject(dataManager)
        }
        .sheet(isPresented: $showingAbout) {
            AboutView()
        }
        .sheet(isPresented: $showingPrivacySettings) {
            PrivacySettingsView()
        }
        .onAppear {
            print("‚öôÔ∏è ËÆæÁΩÆÈ°µÈù¢Âä†ËΩΩÂÆåÊàê")
        }
    }
    
    // Áî®Êà∑‰ø°ÊÅØÂå∫Âüü
    private var userProfileSection: some View {
        VStack(spacing: AppTheme.Spacing.md) {
            HStack {
                Text("‰∏™‰∫∫‰ø°ÊÅØ")
                    .font(AppTheme.Fonts.headline)
                    .foregroundColor(AppTheme.Colors.textPrimary)
                
                Spacer()
            }
            
            UserProfileCard(profile: dataManager.userProfile) {
                showingUserProfile = true
            }
        }
    }
    
    // Â∫îÁî®ËÆæÁΩÆÂå∫Âüü
    private var appSettingsSection: some View {
        VStack(spacing: AppTheme.Spacing.md) {
            HStack {
                Text("Â∫îÁî®ËÆæÁΩÆ")
                    .font(AppTheme.Fonts.headline)
                    .foregroundColor(AppTheme.Colors.textPrimary)
                
                Spacer()
            }
            
            VStack(spacing: 0) {
                SettingsRow(
                    icon: "bell.fill",
                    title: "ÈÄöÁü•ÊèêÈÜí",
                    subtitle: "ËÆæÁΩÆÂøÉÊÉÖËÆ∞ÂΩïÊèêÈÜí",
                    action: {
                        showingNotificationSettings = true
                        print("üîî ÊâìÂºÄÈÄöÁü•ËÆæÁΩÆ")
                    }
                )
                
                Divider()
                    .padding(.leading, 60)
                
                SettingsRow(
                    icon: "paintbrush.fill",
                    title: "ÂøÉÊÉÖÁöÆËÇ§",
                    subtitle: "ÂΩìÂâçÔºö\(dataManager.currentMoodSkinPack.name)",
                    action: {
                        print("üé® Ë∑≥ËΩ¨Âà∞ÁöÆËÇ§ÂïÜÂ∫ó")
                        // Ê≥®ÊÑèÔºöËøôÈáåÂèØ‰ª•ÈÄöËøáNotificationCenterÊàñÂÖ∂‰ªñÊñπÂºèÈÄöÁü•MainTabViewÂàáÊç¢Ê†áÁ≠æ
                        NotificationCenter.default.post(name: NSNotification.Name("SwitchToStoreTab"), object: nil)
                    }
                )
                
                Divider()
                    .padding(.leading, 60)
                
                SettingsRow(
                    icon: "app.badge.fill",
                    title: "Â∫îÁî®ÂõæÊ†á",
                    subtitle: "Êõ¥Êç¢Â∫îÁî®ÂõæÊ†áÊ†∑Âºè",
                    action: {
                        print("üì± Êõ¥Êç¢Â∫îÁî®ÂõæÊ†á")
                    }
                )
            }
            .background(AppTheme.Colors.surface)
            .cornerRadius(AppTheme.CornerRadius.lg)
        }
    }
    
    // Êï∞ÊçÆÁÆ°ÁêÜÂå∫Âüü
    private var dataManagementSection: some View {
        VStack(spacing: AppTheme.Spacing.md) {
            HStack {
                Text("Êï∞ÊçÆÁÆ°ÁêÜ")
                    .font(AppTheme.Fonts.headline)
                    .foregroundColor(AppTheme.Colors.textPrimary)
                
                Spacer()
            }
            
            VStack(spacing: 0) {
                SettingsRow(
                    icon: "square.and.arrow.up.fill",
                    title: "ÂØºÂá∫Êï∞ÊçÆ",
                    subtitle: "Â§á‰ªΩÂøÉÊÉÖÊó•ËÆ∞Êï∞ÊçÆ",
                    action: {
                        showingDataExport = true
                        print("üì§ Êï∞ÊçÆÂØºÂá∫")
                    }
                )
                
                Divider()
                    .padding(.leading, 60)
                
                SettingsRow(
                    icon: "person.2.fill",
                    title: "ÂÆ∂Â∫≠ÂÖ±‰∫´",
                    subtitle: "‰∏éÂÆ∂‰∫∫ÂàÜ‰∫´ÂøÉÊÉÖÁä∂ÊÄÅ",
                    action: {
                        print("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ ÂÆ∂Â∫≠ÂÖ±‰∫´")
                    }
                )
                
                Divider()
                    .padding(.leading, 60)
                
                SettingsRow(
                    icon: "hand.raised.fill",
                    title: "ÈöêÁßÅËÆæÁΩÆ",
                    subtitle: "ÁÆ°ÁêÜÊï∞ÊçÆÈöêÁßÅÊùÉÈôê",
                    action: {
                        showingPrivacySettings = true
                        print("üîí ÈöêÁßÅËÆæÁΩÆ")
                    }
                )
            }
            .background(AppTheme.Colors.surface)
            .cornerRadius(AppTheme.CornerRadius.lg)
        }
    }
    
    // ÊîØÊåÅ‰∏éÂèçÈ¶àÂå∫Âüü
    private var supportSection: some View {
        VStack(spacing: AppTheme.Spacing.md) {
            HStack {
                Text("ÊîØÊåÅ‰∏éÂèçÈ¶à")
                    .font(AppTheme.Fonts.headline)
                    .foregroundColor(AppTheme.Colors.textPrimary)
                
                Spacer()
            }
            
            VStack(spacing: 0) {
                SettingsRow(
                    icon: "heart.fill",
                    title: "ÊîØÊåÅÊàë‰ª¨",
                    subtitle: "ÁªôÂ∫îÁî®ËØÑÂàÜÊàñÂàÜ‰∫´",
                    action: {
                        print("‚ù§Ô∏è ÊîØÊåÅÊàë‰ª¨")
                    }
                )
                
                Divider()
                    .padding(.leading, 60)
                
                SettingsRow(
                    icon: "envelope.fill",
                    title: "ÊÑèËßÅÂèçÈ¶à",
                    subtitle: "ËÅîÁ≥ªÂºÄÂèëËÄÖÂèçÈ¶àÈóÆÈ¢ò",
                    action: {
                        print("‚úâÔ∏è ÊÑèËßÅÂèçÈ¶à")
                    }
                )
            }
            .background(AppTheme.Colors.surface)
            .cornerRadius(AppTheme.CornerRadius.lg)
        }
    }
    
    // ÂÖ≥‰∫éÂ∫îÁî®Âå∫Âüü
    private var aboutSection: some View {
        VStack(spacing: AppTheme.Spacing.md) {
            HStack {
                Text("ÂÖ≥‰∫éÂ∫îÁî®")
                    .font(AppTheme.Fonts.headline)
                    .foregroundColor(AppTheme.Colors.textPrimary)
                
                Spacer()
            }
            
            VStack(spacing: 0) {
                SettingsRow(
                    icon: "info.circle.fill",
                    title: "ÂÖ≥‰∫éÊàë‰ª¨",
                    subtitle: "ÁâàÊú¨‰ø°ÊÅØÂíåÂºÄÂèëÂõ¢Èòü",
                    action: {
                        showingAbout = true
                        print("‚ÑπÔ∏è ÂÖ≥‰∫éÊàë‰ª¨")
                    }
                )
                
                Divider()
                    .padding(.leading, 60)
                
                SettingsRow(
                    icon: "doc.text.fill",
                    title: "ÈöêÁßÅÊîøÁ≠ñ",
                    subtitle: "‰∫ÜËß£Êàë‰ª¨ÁöÑÈöêÁßÅ‰øùÊä§",
                    action: {
                        print("üìÑ ÈöêÁßÅÊîøÁ≠ñ")
                    }
                )
                
                Divider()
                    .padding(.leading, 60)
                
                SettingsRow(
                    icon: "doc.plaintext.fill",
                    title: "Áî®Êà∑ÂçèËÆÆ",
                    subtitle: "Êü•Áúã‰ΩøÁî®Êù°Ê¨æ",
                    action: {
                        print("üìã Áî®Êà∑ÂçèËÆÆ")
                    }
                )
            }
            .background(AppTheme.Colors.surface)
            .cornerRadius(AppTheme.CornerRadius.lg)
        }
    }
}

// MARK: - Áî®Êà∑ÈÖçÁΩÆÂç°Áâá
struct UserProfileCard: View {
    let profile: UserProfile
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            HStack(spacing: AppTheme.Spacing.md) {
                // Â§¥ÂÉèÂå∫Âüü
                Circle()
                    .fill(
                        LinearGradient(
                            colors: [
                                AppTheme.Colors.primary,
                                AppTheme.Colors.primaryLight
                            ],
                            startPoint: .topLeading,
                            endPoint: .bottomTrailing
                        )
                    )
                    .frame(width: 60, height: 60)
                    .overlay(
                        Image(systemName: "person.fill")
                            .font(.title2)
                            .foregroundColor(.white)
                    )
                
                // Áî®Êà∑‰ø°ÊÅØ
                VStack(alignment: .leading, spacing: AppTheme.Spacing.xs) {
                    Text("Áî®Êà∑Ê°£Ê°à")
                        .font(AppTheme.Fonts.headline)
                        .foregroundColor(AppTheme.Colors.textPrimary)
                    
                    HStack {
                        Text("ÊÄßÂà´: \(profile.gender?.rawValue ?? "Êú™ËÆæÁΩÆ")")
                            .font(AppTheme.Fonts.callout)
                            .foregroundColor(AppTheme.Colors.textSecondary)
                        
                        Spacer()
                    }
                    
                    Text("ÁÇπÂáªÁºñËæë‰∏™‰∫∫‰ø°ÊÅØ")
                        .font(AppTheme.Fonts.caption)
                        .foregroundColor(AppTheme.Colors.primary)
                }
                
                Spacer()
                
                Image(systemName: "chevron.right")
                    .font(.caption)
                    .foregroundColor(AppTheme.Colors.textTertiary)
            }
            .padding(AppTheme.Spacing.cardPadding)
            .background(AppTheme.Colors.surface)
            .cornerRadius(AppTheme.CornerRadius.lg)
        }
        .buttonStyle(PlainButtonStyle())
    }
}

// MARK: - ËÆæÁΩÆË°åÁªÑ‰ª∂
struct SettingsRow: View {
    let icon: String
    let title: String
    let subtitle: String
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            HStack(spacing: AppTheme.Spacing.md) {
                // ÂõæÊ†á
                Image(systemName: icon)
                    .font(.title3)
                    .foregroundColor(AppTheme.Colors.primary)
                    .frame(width: 28, height: 28)
                
                // ÊñáÂ≠óÂÜÖÂÆπ
                VStack(alignment: .leading, spacing: AppTheme.Spacing.xs) {
                    Text(title)
                        .font(AppTheme.Fonts.callout)
                        .foregroundColor(AppTheme.Colors.textPrimary)
                    
                    Text(subtitle)
                        .font(AppTheme.Fonts.caption)
                        .foregroundColor(AppTheme.Colors.textSecondary)
                }
                
                Spacer()
                
                // Âè≥ÁÆ≠Â§¥
                Image(systemName: "chevron.right")
                    .font(.caption)
                    .foregroundColor(AppTheme.Colors.textTertiary)
            }
            .padding(.horizontal, AppTheme.Spacing.md)
            .padding(.vertical, AppTheme.Spacing.md)
        }
        .buttonStyle(PlainButtonStyle())
    }
}

// MARK: - Âç†‰ΩçËßÜÂõæ
struct UserProfileView: View {
    @EnvironmentObject var dataManager: DataManager
    @Environment(\.dismiss) private var dismiss
    
    var body: some View {
        NavigationView {
            VStack(spacing: AppTheme.Spacing.lg) {
                Text("Áî®Êà∑ËµÑÊñôËÆæÁΩÆ")
                    .font(AppTheme.Fonts.title1)
                    .foregroundColor(AppTheme.Colors.textPrimary)
                
                Text("ËøôÈáåÂ∞ÜÊèê‰æõÂÆåÊï¥ÁöÑÁî®Êà∑ËµÑÊñôÁºñËæëÂäüËÉΩ")
                    .font(AppTheme.Fonts.body)
                    .foregroundColor(AppTheme.Colors.textSecondary)
                    .multilineTextAlignment(.center)
                
                Spacer()
            }
            .padding(AppTheme.Spacing.lg)
            .navigationTitle("‰∏™‰∫∫‰ø°ÊÅØ")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("ÂÆåÊàê") {
                        dismiss()
                    }
                }
            }
        }
    }
}

struct NotificationSettingsView: View {
    @EnvironmentObject var dataManager: DataManager
    @Environment(\.dismiss) private var dismiss
    @State private var dailyReminderEnabled = true
    @State private var weeklyReviewEnabled = true
    @State private var reminderTime = Date()
    @State private var healthTipsEnabled = true
    
    var body: some View {
        NavigationView {
            VStack(spacing: AppTheme.Spacing.lg) {
                VStack(alignment: .leading, spacing: AppTheme.Spacing.md) {
                    Text("ÈÄöÁü•ËÆæÁΩÆ")
                        .font(AppTheme.Fonts.title2)
                        .foregroundColor(AppTheme.Colors.textPrimary)
                    
                    VStack(spacing: AppTheme.Spacing.md) {
                        HStack {
                            Text("ÊØèÊó•ÊèêÈÜí")
                                .font(AppTheme.Fonts.callout)
                                .foregroundColor(AppTheme.Colors.textPrimary)
                            
                            Spacer()
                            
                            Toggle("", isOn: $dailyReminderEnabled)
                                .toggleStyle(SwitchToggleStyle(tint: AppTheme.Colors.primary))
                        }
                        
                        if dailyReminderEnabled {
                            DatePicker("ÊèêÈÜíÊó∂Èó¥", selection: $reminderTime, displayedComponents: .hourAndMinute)
                                .font(AppTheme.Fonts.callout)
                        }
                        
                        Divider()
                        
                        HStack {
                            Text("Âë®ÊÄªÁªì")
                                .font(AppTheme.Fonts.callout)
                                .foregroundColor(AppTheme.Colors.textPrimary)
                            
                            Spacer()
                            
                            Toggle("", isOn: $weeklyReviewEnabled)
                                .toggleStyle(SwitchToggleStyle(tint: AppTheme.Colors.primary))
                        }
                        
                        Divider()
                        
                        HStack {
                            Text("ÂÅ•Â∫∑Â∞èË¥¥Â£´")
                                .font(AppTheme.Fonts.callout)
                                .foregroundColor(AppTheme.Colors.textPrimary)
                            
                            Spacer()
                            
                            Toggle("", isOn: $healthTipsEnabled)
                                .toggleStyle(SwitchToggleStyle(tint: AppTheme.Colors.primary))
                        }
                    }
                    .padding(AppTheme.Spacing.cardPadding)
                    .background(AppTheme.Colors.surface)
                    .cornerRadius(AppTheme.CornerRadius.lg)
                }
                
                Spacer()
            }
            .padding(AppTheme.Spacing.lg)
            .navigationTitle("ÈÄöÁü•ËÆæÁΩÆ")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("ÂèñÊ∂à") {
                        dismiss()
                    }
                }
                
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("‰øùÂ≠ò") {
                        saveNotificationSettings()
                        dismiss()
                    }
                }
            }
            .onAppear {
                loadNotificationSettings()
            }
        }
    }
    
    private func loadNotificationSettings() {
        let profile = dataManager.userProfile
        dailyReminderEnabled = profile.enableDailyReminder
        weeklyReviewEnabled = profile.enableWeeklyReview
        healthTipsEnabled = profile.enableHealthTips
        reminderTime = profile.dailyReminderTime
        print("üîî Âä†ËΩΩÈÄöÁü•ËÆæÁΩÆ")
    }
    
    private func saveNotificationSettings() {
        dataManager.updateNotificationSettings(
            dailyReminder: dailyReminderEnabled,
            reminderTime: reminderTime,
            weeklyReview: weeklyReviewEnabled,
            healthTips: healthTipsEnabled
        )
        print("üíæ ‰øùÂ≠òÈÄöÁü•ËÆæÁΩÆ")
    }
}

struct DataExportView: View {
    @EnvironmentObject var dataManager: DataManager
    @Environment(\.dismiss) private var dismiss
    @State private var showingShareSheet = false
    @State private var exportedData = ""
    
    private var dataSummary: [String: Any] {
        dataManager.getDataSummary()
    }
    
    var body: some View {
        NavigationView {
            VStack(spacing: AppTheme.Spacing.lg) {
                VStack(spacing: AppTheme.Spacing.md) {
                    Image(systemName: "square.and.arrow.up")
                        .font(.system(size: 60))
                        .foregroundColor(AppTheme.Colors.primary)
                    
                    Text("Êï∞ÊçÆÂØºÂá∫")
                        .font(AppTheme.Fonts.title1)
                        .foregroundColor(AppTheme.Colors.textPrimary)
                    
                    Text("Â∞ÜÊÇ®ÁöÑÂøÉÊÉÖÊó•ËÆ∞Êï∞ÊçÆÂØºÂá∫Â§á‰ªΩÔºåÊàñÂàÜ‰∫´Áªô‰ø°‰ªªÁöÑ‰∫∫")
                        .font(AppTheme.Fonts.body)
                        .foregroundColor(AppTheme.Colors.textSecondary)
                        .multilineTextAlignment(.center)
                }
                
                // Êï∞ÊçÆÊ¶ÇËßà
                VStack(alignment: .leading, spacing: AppTheme.Spacing.md) {
                    Text("Êï∞ÊçÆÊ¶ÇËßà")
                        .font(AppTheme.Fonts.headline)
                        .foregroundColor(AppTheme.Colors.textPrimary)
                    
                    VStack(spacing: AppTheme.Spacing.sm) {
                        DataSummaryRow(label: "ÂøÉÊÉÖËÆ∞ÂΩï", value: "\(dataSummary["totalEntries"] as? Int ?? 0) Êù°")
                        DataSummaryRow(label: "Âπ≥ÂùáÂøÉÊÉÖ", value: String(format: "%.1f", dataSummary["averageMood"] as? Double ?? 0.0))
                        DataSummaryRow(label: "ËÆ∞ÂΩïÊúüÈó¥", value: dataSummary["dateRange"] as? String ?? "Êó†Êï∞ÊçÆ")
                        DataSummaryRow(label: "Ëá™ÂÆö‰πâÊ¥ªÂä®", value: "\(dataSummary["customActivitiesCount"] as? Int ?? 0) ‰∏™")
                    }
                }
                .padding(AppTheme.Spacing.cardPadding)
                .background(AppTheme.Colors.surface)
                .cornerRadius(AppTheme.CornerRadius.lg)
                
                // ÂØºÂá∫ÊåâÈíÆ
                VStack(spacing: AppTheme.Spacing.md) {
                    Button("ÂØºÂá∫JSONÊï∞ÊçÆ") {
                        exportAsJSON()
                    }
                    .frame(maxWidth: .infinity)
                    .primaryButtonStyle()
                    
                    Button("ÁîüÊàêÂ§á‰ªΩÊä•Âëä") {
                        generateBackupReport()
                    }
                    .frame(maxWidth: .infinity)
                    .secondaryButtonStyle()
                }
                
                Spacer()
                
                Text("ÂØºÂá∫ÁöÑÊï∞ÊçÆÂåÖÂê´ÊÇ®ÁöÑÊâÄÊúâÂøÉÊÉÖËÆ∞ÂΩïÂíåËÆæÁΩÆ‰ø°ÊÅØ")
                    .font(AppTheme.Fonts.caption)
                    .foregroundColor(AppTheme.Colors.textTertiary)
                    .multilineTextAlignment(.center)
            }
            .padding(AppTheme.Spacing.lg)
            .navigationTitle("Êï∞ÊçÆÂØºÂá∫")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("ÂÖ≥Èó≠") {
                        dismiss()
                    }
                }
            }
        }
        .sheet(isPresented: $showingShareSheet) {
            ShareSheet(items: [exportedData])
        }
    }
    
    private func exportAsJSON() {
        exportedData = dataManager.exportDataAsJSON()
        if !exportedData.isEmpty {
            showingShareSheet = true
        }
    }
    
    private func generateBackupReport() {
        let summary = dataSummary
        let reportText = """
        ÂøÉÊÉÖÊó•ËÆ∞Â§á‰ªΩÊä•Âëä
        
        ÂØºÂá∫Êó•Êúü: \(DateFormatter.localizedString(from: Date(), dateStyle: .long, timeStyle: .short))
        
        Êï∞ÊçÆÁªüËÆ°:
        ‚Ä¢ ÂøÉÊÉÖËÆ∞ÂΩïÊÄªÊï∞: \(summary["totalEntries"] as? Int ?? 0) Êù°
        ‚Ä¢ Âπ≥ÂùáÂøÉÊÉÖËØÑÂàÜ: \(String(format: "%.1f", summary["averageMood"] as? Double ?? 0.0))
        ‚Ä¢ ËÆ∞ÂΩïÊó∂Èó¥ËåÉÂõ¥: \(summary["dateRange"] as? String ?? "Êó†Êï∞ÊçÆ")
        ‚Ä¢ Ëá™ÂÆö‰πâÊ¥ªÂä®: \(summary["customActivitiesCount"] as? Int ?? 0) ‰∏™
        ‚Ä¢ ‰ºöÂëòÁä∂ÊÄÅ: \(summary["isPremium"] as? Bool == true ? "‰ªòË¥πÁî®Êà∑" : "ÂÖçË¥πÁî®Êà∑")
        
        Ê≠§Êä•ÂëäÁî±ÂøÉÊÉÖÊó•ËÆ∞Â∫îÁî®Ëá™Âä®ÁîüÊàê„ÄÇ
        """
        
        exportedData = reportText
        showingShareSheet = true
        print("üìã ÁîüÊàêÂ§á‰ªΩÊä•Âëä")
    }
}

struct DataSummaryRow: View {
    let label: String
    let value: String
    
    var body: some View {
        HStack {
            Text(label)
                .font(AppTheme.Fonts.callout)
                .foregroundColor(AppTheme.Colors.textSecondary)
            
            Spacer()
            
            Text(value)
                .font(AppTheme.Fonts.callout)
                .foregroundColor(AppTheme.Colors.textPrimary)
                .fontWeight(.medium)
        }
    }
}

struct ShareSheet: UIViewControllerRepresentable {
    let items: [Any]
    
    func makeUIViewController(context: Context) -> UIActivityViewController {
        let controller = UIActivityViewController(activityItems: items, applicationActivities: nil)
        return controller
    }
    
    func updateUIViewController(_ uiViewController: UIActivityViewController, context: Context) {}
}

struct PrivacySettingsView: View {
    @Environment(\.dismiss) private var dismiss
    
    var body: some View {
        NavigationView {
            VStack(spacing: AppTheme.Spacing.lg) {
                Text("ÈöêÁßÅËÆæÁΩÆ")
                    .font(AppTheme.Fonts.title1)
                    .foregroundColor(AppTheme.Colors.textPrimary)
                
                Text("ÁÆ°ÁêÜÊÇ®ÁöÑÊï∞ÊçÆÈöêÁßÅÂíåÊùÉÈôêËÆæÁΩÆ")
                    .font(AppTheme.Fonts.body)
                    .foregroundColor(AppTheme.Colors.textSecondary)
                    .multilineTextAlignment(.center)
                
                Spacer()
            }
            .padding(AppTheme.Spacing.lg)
            .navigationTitle("ÈöêÁßÅËÆæÁΩÆ")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("ÂÆåÊàê") {
                        dismiss()
                    }
                }
            }
        }
    }
}

struct AboutView: View {
    @Environment(\.dismiss) private var dismiss
    
    var body: some View {
        NavigationView {
            VStack(spacing: AppTheme.Spacing.lg) {
                VStack(spacing: AppTheme.Spacing.md) {
                    Image(systemName: "heart.fill")
                        .font(.system(size: 60))
                        .foregroundColor(AppTheme.Colors.primary)
                    
                    Text("ÂøÉÊÉÖÊó•ËÆ∞")
                        .font(AppTheme.Fonts.title1)
                        .foregroundColor(AppTheme.Colors.textPrimary)
                    
                    Text("ÁâàÊú¨ 1.0.0")
                        .font(AppTheme.Fonts.callout)
                        .foregroundColor(AppTheme.Colors.textSecondary)
                }
                
                VStack(alignment: .leading, spacing: AppTheme.Spacing.md) {
                    Text("‰∏ì‰∏∫ËÄÅÂπ¥‰∫∫ËÆæËÆ°ÁöÑÂøÉÊÉÖËÆ∞ÂΩïÂ∫îÁî®")
                        .font(AppTheme.Fonts.body)
                        .foregroundColor(AppTheme.Colors.textPrimary)
                    
                    Text("‚Ä¢ ÁÆÄÊ¥ÅÊòìÁî®ÁöÑÁïåÈù¢ËÆæËÆ°\n‚Ä¢ ‰∏∞ÂØåÁöÑÂøÉÊÉÖË°®ËææÊñπÂºè\n‚Ä¢ ËØ¶ÁªÜÁöÑÊï∞ÊçÆÁªüËÆ°ÂàÜÊûê\n‚Ä¢ ÈÄÇËÄÅÂåñÊìç‰Ωú‰ΩìÈ™å")
                        .font(AppTheme.Fonts.callout)
                        .foregroundColor(AppTheme.Colors.textSecondary)
                        .lineSpacing(4)
                }
                .padding(AppTheme.Spacing.cardPadding)
                .background(AppTheme.Colors.surface)
                .cornerRadius(AppTheme.CornerRadius.lg)
                
                Spacer()
            }
            .padding(AppTheme.Spacing.lg)
            .navigationTitle("ÂÖ≥‰∫éÂ∫îÁî®")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("ÂÖ≥Èó≠") {
                        dismiss()
                    }
                }
            }
        }
    }
}

#Preview {
    SettingsView()
        .environmentObject(DataManager.shared)
} 